name: CI

on:
  push:
    branches: [main, master]
  pull_request:
    branches: [main, master]

permissions:
  contents: write

jobs:
  test:
    name: Test & Coverage
    environment: Test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Create .env.test file
        run: |
          cat > .env.test <<EOF
          NODE_ENV=test
          POSTGRES_TEST_USER=${{ secrets.POSTGRES_TEST_USER }}
          POSTGRES_TEST_PASSWORD=${{ secrets.POSTGRES_TEST_PASSWORD }}
          POSTGRES_TEST_DB=${{ secrets.POSTGRES_TEST_DB }}
          DATABASE_URL=${{ secrets.DATABASE_URL }}
          JWT_SECRET=${{ secrets.JWT_SECRET }}
          REFRESH_JWT_SECRET=${{ secrets.REFRESH_JWT_SECRET }}
          SALT_ROUNDS=${{ secrets.SALT_ROUNDS }}
          EOF

      - name: Run tests with coverage
        run: npm run test:all:coverage

      - name: Extract coverage percentage
        id: coverage
        run: |
          # Extract coverage percentage from lcov.info file
          if [ -f "coverage/lcov.info" ]; then
            COVERAGE=$(grep -E "LF:|LH:" coverage/lcov.info | \
              awk 'BEGIN{lf=0; lh=0} /LF:/{lf+=$2} /LH:/{lh+=$2} END{
                if(lf>0) printf "%.1f", (lh/lf)*100; 
                else print "0.0"
              }')
            echo "percentage=$COVERAGE" >> $GITHUB_OUTPUT
            echo "Coverage percentage: $COVERAGE%"
          else
            echo "percentage=0.0" >> $GITHUB_OUTPUT
            echo "Coverage file not found, setting to 0.0%"
          fi

      - name: Generate coverage badge
        uses: schneegans/dynamic-badges-action@v1.7.0
        with:
          auth: ${{ secrets.GITHUB_TOKEN }}
          gistID: ${{ secrets.GIST_ID }}
          filename: coverage-badge.json
          label: Coverage
          message: ${{ steps.coverage.outputs.percentage }}%
          color: ${{ steps.coverage.outputs.percentage > 80 && 'brightgreen' || steps.coverage.outputs.percentage > 60 && 'yellow' || 'red' }}

      - name: Update README with coverage percentage
        if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
        run: |
          # Update the coverage percentage in README.md
          COVERAGE_PERCENT="${{ steps.coverage.outputs.percentage }}"

          # Create the coverage badge URL (using shields.io)
          BADGE_COLOR="red"
          if (( $(echo "$COVERAGE_PERCENT > 80" | bc -l) )); then
            BADGE_COLOR="brightgreen"
          elif (( $(echo "$COVERAGE_PERCENT > 60" | bc -l) )); then
            BADGE_COLOR="yellow"
          fi

          # Update README.md
          sed -i "s|<!-- COVERAGE_PERCENTAGE -->.*<!-- /COVERAGE_PERCENTAGE -->|<!-- COVERAGE_PERCENTAGE -->**Test Coverage: ${COVERAGE_PERCENT}%** ![Coverage](https://img.shields.io/badge/Coverage-${COVERAGE_PERCENT}%25-${BADGE_COLOR})<!-- /COVERAGE_PERCENTAGE -->|g" README.md

      - name: Commit and push changes
        if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

          # Check if there are changes to commit
          if git diff --quiet README.md; then
            echo "No changes to README.md"
          else
            git add README.md
            git commit -m "chore: update coverage percentage to ${{ steps.coverage.outputs.percentage }}% [skip ci]"
            git push
          fi

      - name: Upload coverage reports
        uses: actions/upload-artifact@v4
        with:
          name: coverage-reports
          path: |
            coverage/
          retention-days: 30
